<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book lang="en">
<bookinfo>
<title>ClojureScript Unraveled</title>
<date>v1.0</date>
<author>
<firstname>Andrey Antukh &amp; Alejandro Gomez</firstname>
</author>
<authorinitials>A</authorinitials>
</bookinfo>
<chapter id="_introduction">
<title>Introduction</title>
<simpara>This chapter will be a first introduction to the clojure ecosystem, and intends to explain
the philosophy behind of it.</simpara>
<section id="_the_first_contact">
<title>The first contact.</title>
<simpara><emphasis>ClojureScript</emphasis> is a clojure language that targets javascript and can work in different
execution enviroments like browser, nodejs, iojs, nashhorn, and much others.</simpara>
<simpara>Unlike other languages that intends to <emphasis>compile</emphasis> to javascript (like typescript,
funscript or coffeescript) is designed to use the javascript like a bytecode. It embrases the
functional programming approach with very safe and consistent defaults.</simpara>
<simpara>An other big difference and in my opinion a big advantage over other languages, is that the clojure
language is designed to be guest. Is designed as language without own virtual machine that
can be easy adaptated to the host differences.</simpara>
<simpara>TBD</simpara>
</section>
<section id="_the_pillars_behind_the_language">
<title>The pillars behind the language.</title>
<simpara>TBD</simpara>
</section>
<section id="_why_the_javascript_host_improve_title">
<title>Why the javascript host (improve title).</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="_the_language">
<title>The language.</title>
<simpara>This chapter will be a little introduction to ClojureScript without assumptions about previous
knowledge of the Clojure language, providing a quick tour over all the things you will need to know
in order to understand the rest of this book.</simpara>
<simpara>This is an incomplete list of topics that will be covered in this chapter:</simpara>
<itemizedlist>
<listitem>
<simpara>Syntax</simpara>
</listitem>
<listitem>
<simpara>The base types</simpara>
</listitem>
<listitem>
<simpara>Functions</simpara>
</listitem>
<listitem>
<simpara>Loops &amp; Blocks</simpara>
</listitem>
<listitem>
<simpara>Collection types</simpara>
</listitem>
<listitem>
<simpara>Destructuring</simpara>
</listitem>
<listitem>
<simpara>Namespaces</simpara>
</listitem>
<listitem>
<simpara>Custom Data Types</simpara>
</listitem>
<listitem>
<simpara>Polymorphic constructions</simpara>
</listitem>
<listitem>
<simpara>Interoperability with host</simpara>
</listitem>
<listitem>
<simpara>State management</simpara>
</listitem>
<listitem>
<simpara>Mutability</simpara>
</listitem>
<listitem>
<simpara>Macros</simpara>
</listitem>
<listitem>
<simpara>Truthiness</simpara>
</listitem>
</itemizedlist>
<section id="_first_steps_with_lisp_syntax">
<title>First steps with lisp syntax</title>
<simpara>Invented by John McCarthy in 1958, Lisp is one of the oldest programming languages that is still
around. It has evolved into a whole lot of derivatives called dialects and ClojureScript is
one of them. It&#8217;s a programming language written in its own data structures, originally lists enclosed in
parenthesis, but Clojure(Script) has evolved the Lisp syntax with more data structures making
it more pleasant to write and read.</simpara>
<simpara>A list with a function in the first position is used for calling a function in ClojureScript:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(+ 1 2 3)
;; =&gt; 6</programlisting>
<simpara>In the example above we&#8217;re applying the addition function <literal>+</literal> to the arguments 1, 2 and 3. ClojureScript
allows many unusual characters like <literal>?</literal> or <literal>-</literal> in symbol names which makes it easier to read:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(zero? 0)
;; =&gt; true</programlisting>
<simpara>For distinguishing function calls and lists, we can quote lists for turning off evaluation. The quoted
lists will be treat as data instead of as a function call:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">'(+ 1 2 3)
;; =&gt; (+ 1 2 3)</programlisting>
<simpara>ClojureScript uses more than lists for its syntax, the full details will be covered later but here is an
example of the usage of a vector (enclosed in brackets) for defining local bindings:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(let [x 1
      y 2
      z 3]
  (+ x y x))
;; =&gt; 6</programlisting>
<simpara>This is practically all the syntax we need to know for using not only ClojureScript, but any Lisp. Being
written in its own data structures (often referred to as homoiconicity) is a great property since the syntax
is uniform and simple; also, code generation via macros is easier than in any language, giving us
plenty of power for extending the language to our needs.</simpara>
</section>
<section id="_the_base_data_types">
<title>The base data types.</title>
<simpara>The ClojureScript language has a rich set of data types like most programmig languages. It provides
scalar datatypes that will be very familiar for you such as numbers, strings, floats. But, also
provides a great amount of others that maybe are not well known such as symbols, keywords, regex,
vars, atoms, volatiles&#8230;&#8203;</simpara>
<simpara><emphasis>ClojureScript</emphasis> embrases the host language, and as possible it uses the host provided types. In this
case: numbers and strings are used as is and them behaves in same way as in javascript.</simpara>
<section id="_numbers">
<title>Numbers</title>
<simpara>In <emphasis>ClojureScript</emphasis> the numbers includes both: integers and floating points. But, knowing that
<emphasis>ClojureScript</emphasis> is a guest language that compiles to javascript, having integers is an ilusion.
Because the javascript language treats all numbers as floating points values.</simpara>
<simpara>Like in any other languages, the numbers in <emphasis>ClojureScript</emphasis> are represented in following way:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">23
+23
-100
1.7
-2
33e8
12e-14
3.2e-4</programlisting>
</section>
<section id="_keywords">
<title>Keywords</title>
<simpara>Keywords in <emphasis>ClojureScript</emphasis> are objecs that always evaluate to themselves. Them are usually
used in map data structures for reprensent in a most efficient way to the keys.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">:foobar
:2
:?
:foo/bar</programlisting>
<simpara>As you can see, the keyword are all prefixed with <literal>:</literal>, but this char is only part
of literal syntax and is not part of the name of the object.</simpara>
<simpara>You also can create a keyword calling a function <literal>keyword</literal>. Do not worry if you do not understand
or something is not clear in the following example, the functions are discussed some chapters
below.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(keyword "foo")
;; =&gt; :foo</programlisting>
</section>
<section id="_symbols">
<title>Symbols</title>
<simpara>The symbols in <emphasis>ClojureScript</emphasis> are very very similar to now known <emphasis role="strong">Keywords</emphasis>. But them
instead of evaluating to themselves, are evalutated to something that them refers, that
can be function, variables, &#8230;&#8203;</simpara>
<simpara>Them are represented with something that not star with a number</simpara>
<programlisting language="clojure" linenumbering="unnumbered">sample-symbol
othersymbol
f1</programlisting>
<simpara>Do not worry if you do not understand clearly this part, symbols are used un almost
all examples and you will have the oportunity to undesarstand them in a practical way,
with examples.</simpara>
</section>
<section id="_strings">
<title>Strings</title>
<simpara>Nothing new we can explain about strings that you do not known. In <emphasis>ClojureScript</emphasis> them
are work like in any other language. Them are immutable.</simpara>
<simpara>And in this concrete case are the same as in javascript:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">"A example of a string"</programlisting>
<simpara>The pecularity of Strings on <emphasis>ClojureScript</emphasis> is due to lisp syntax, and is that you don&#8217;t need
additional syntax for multiline strings:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">"This is a multiline
      string in ClojureScript."</programlisting>
</section>
<section id="_characters">
<title>Characters</title>
<simpara><emphasis>ClojureScript</emphasis> also has a representation for one character and it has a literal syntax for represent
them.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">\a        ; The lowercase a character
\newline  ; The new line character</programlisting>
<simpara>As its host does not a clear representation for character type, in <emphasis>ClojureScript</emphasis> behind the scenes
one character is a simple string with one character.</simpara>
</section>
<section id="_collections">
<title>Collections</title>
<simpara>As usual, the second big step on explaining one language, is explain its collections and collection
abstractions. The <emphasis>ClojureScript</emphasis> is not an exception in this rule.</simpara>
<simpara><emphasis>ClojureScript</emphasis> comes with great bunch of different collections. The main difference of <emphasis>ClojureScript</emphasis>
collections with other languages is that them are persistent and immutable.</simpara>
<simpara>But before venture of all these (maybe) unknown concepts, we&#8217;ll go to make a high level overview
of existing collection types in <emphasis>ClojureScript</emphasis>.</simpara>
<section id="_lists">
<title>Lists</title>
<simpara>This is a clasic collection type in lisp languages. <emphasis>ClojureScript</emphasis> is not an exception. List is the
simplest collection data structure in <emphasis>ClojureScript</emphasis>. Lists can contain items of any type, including
other collections.</simpara>
<simpara>Lists in <emphasis>ClojureScript</emphasis> are repsesented with parentheses as its literal syntax:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">'(1 2 3 4 5)
'(:foo :bar 2)</programlisting>
<simpara>As you can observe, all list examples are prefixed with <literal>'</literal> char. This is because lists in lisp like
languages are often used for express expressions forms such as function or macro calls. In that case
the first item should be a symbol that will evaluate to a something callable and the rest of list
elemenents will be a function parameters.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(inc 1)
;; =&gt; 2

'(inc 1)
;; =&gt; (inc 1)</programlisting>
<simpara>As you see, if you will evaluate the <literal>(inc 1)</literal> without prefixing it with <literal>'</literal> char, it will resolve
the <literal>inc</literal> symbol to the <emphasis role="strong">inc</emphasis> function and will execute it with <literal>1</literal> as first parameter. Resulting
in a <literal>2</literal> as return value.</simpara>
<simpara>Lists have the pecularity that they are very efficient if you access to it in a sequence mode or
access to its first elements but are not very good option if you need random (index) acces to its
elements.</simpara>
</section>
<section id="_vectors">
<title>Vectors</title>
<simpara>Like lists, <emphasis role="strong">Vectors</emphasis>  store a series of values, but in this case with very efficient index access
to its elements and its elements in difference with list are evaluated in order. Do not worry, in
below chapters we&#8217;ll go depth in details but at this moment is more that enough.</simpara>
<simpara>Vectors uses square brakets for the literal syntax, let see some examples:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">[:foo :bar]
[3 4 5 nil]</programlisting>
<simpara>Like lists, vectors can contain objects of any type, as you can observe the previos example.</simpara>
</section>
<section id="_maps">
<title>Maps</title>
<simpara>Maps is a collection abstraction that allows store unique keys associated with one value. In other
languages are commonly known as hash-maps or dicts. Maps in <emphasis>ClojureScript</emphasis> uses a
curly braces as literal syntax.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">{:foo "bar", :baz 2}
{:foobar [:a :b :c]}</programlisting>
<note>
<simpara>Commas are frequently used for separate a key value pair but are completelly optional. In
<emphasis>ClojureScript</emphasis> syntax, comas are treated like spaces.</simpara>
</note>
<simpara>Like Vectors, every item in a map literal is evaluated before the result is stored in a map, but
the order of evaluation is not guaranteed.</simpara>
</section>
<section id="_sets">
<title>Sets</title>
<simpara>And finally, <emphasis role="strong">Sets</emphasis>.</simpara>
<simpara>Sets stores in an unordered way zero or more unique items of any type. They,
like maps, uses curly braces for its literal syntax with difference that uses a <literal>#</literal> as leading
character:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">#{1 2 3 :foo :bar}</programlisting>
<simpara>In below chapters we&#8217;ll go depth in sets and other collection types explained in this chapter.</simpara>
</section>
</section>
</section>
<section id="_vars">
<title>Vars</title>
<simpara><emphasis>ClojureScript</emphasis> is a mostly functional language and focused in immutability. Becuase of that, it does
not has the concept of variables. The most closest analogy to variables are <emphasis role="strong">vars</emphasis>. The vars are
represented by symbols and stores a single value together with metadata.</simpara>
<simpara>You can define a var using a <literal>def</literal> special form:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def x 22)
(def y [1 2 3])</programlisting>
<simpara>The vars are always top level in the namespace. If you use <literal>def</literal> in a function call, the var will be defined
at the namespace level.</simpara>
</section>
<section id="_functions">
<title>Functions</title>
<section id="_the_first_contact_2">
<title>The first contact</title>
<simpara>It&#8217;s time of make things happen. In <emphasis>ClojureScript</emphasis>, a function are first-class type. It behaves
like any other type, you can pass it as parameter, you can return it as value, always respecting
the lexical scope. <emphasis>ClojureScript</emphasis> also has some features from dynamic scope but this will be discused
in other section.</simpara>
<simpara>If you want know more about scopes, this <ulink url="http://en.wikipedia.org/wiki/Scope_%28computer_science">wikipedia article</ulink>
is ver extensive and explain very well different types of scope.</simpara>
<simpara>As <emphasis>ClojureScript</emphasis> is a lisp dialect, it uses the prefix notation for calling a function:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(inc 1)
;; =&gt; 2</programlisting>
<simpara>The <literal>inc</literal> is a function and is part of <emphasis>ClojureScript</emphasis> runtime, and <literal>1</literal> is a first positional
argument for the <literal>inc</literal> function.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(+ 1 2 3)
;; =&gt; 6</programlisting>
<simpara>The <literal>+</literal> symbol represents a <literal>add</literal> function, in ALGOL type of languages is an operator and only
allows two parameters.</simpara>
<simpara>The prefix notation has huge advantages, some of them not alwats obvious. <emphasis>ClojureScript</emphasis> does not
has distinction between a function and operator, everything is a function. The inmediate advantage
is that the prefix notation allows an arbitrary number of arguments per "operator". Also, it eliminates
per complete the problem of operator precedence.</simpara>
</section>
<section id="_defining_own_functions">
<title>Defining own functions</title>
<simpara>The function can be defined with <literal>fn</literal> special form. This is aspect of function definition:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(fn [param1 param2]
  (+ (inc param1) (inc param2)))</programlisting>
<simpara>You can define a function and call it in same time (in a single expression):</simpara>
<programlisting language="clojure" linenumbering="unnumbered">((fn [x] (inc x)) 1)
;; =&gt; 2</programlisting>
<simpara>Let start creating named functions. But that is means named function really? Is very simple,
as in <emphasis>ClojureScript</emphasis> functions are fist-class and behaves like any other value, naming a function
is just store it in a var:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def myinc (fn [x] (+ x 1)))

(myinc 1)
;; =&gt; 2</programlisting>
<simpara><emphasis>ClojureScript</emphasis> also offers the <literal>defn</literal> macro as a little sugar syntax for make function definition
more idiomatic:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn myinc
  "Self defined version of `inc`."
  [x]
  (+ x 1))</programlisting>
</section>
<section id="_function_with_multiple_arities">
<title>Function with multiple arities</title>
<simpara><emphasis>ClojureScript</emphasis> also comes with ability to define functions with arbitrary number of arities. The
syntax is almost the same as define standard function with the difference that it has more that
one body.</simpara>
<simpara>Let see an example, surelly it will explain it much better:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn myinc
  "Self dined version of parametrized `inc`."
  ([x] (myinc x 1))
  ([x increment]
   (+ x increment)))</programlisting>
<simpara>And there some examples using the previously defined multi arity function. I can observe that
if you call a function with wrong number of parameters the compiler will emit an error about that:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(myinc 1)
;; =&gt; 1

(myinc 1 3)
;; =&gt; 4

(myinc 1 3 3)
;; Compiler error</programlisting>
<note>
<simpara>Explaining the "arity" is out of scope of this book, however you can read about that in this
<ulink url="http://en.wikipedia.org/wiki/Arity">wikipedia article</ulink>.</simpara>
</note>
</section>
<section id="_variadic_functions">
<title>Variadic functions</title>
<simpara>An other way to accept multiple parameters is defining variadic functions. Variadic functions
are functions that will be able accept arbitrary number of arguments:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn my-variadic-set
  [&amp; params]
  (set params))

(my-variadic-set 1 2 3 1)
;; =&gt; #{1 2 3}</programlisting>
<simpara>The way to denone a variadic function is using the <literal>&amp;</literal> simbol prefix on its arguments vector.</simpara>
</section>
<section id="_short_syntax_for_anonymous_functions">
<title>Short syntax for anonymous functions</title>
<simpara><emphasis>ClojureScript</emphasis> provides a shorter syntax for define anonymos (and almost always one liner) functions
using the <literal>#()</literal> reader macro. Reader macros are "special" expressions that in compile time will be
transformed to the apropiate language form. In this case to some expression that uses <literal>fn</literal> special
form.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def my-set #(set %1 %2))

(my-set 1 2)
;; =&gt; #{1 2}</programlisting>
<simpara>The <literal>%1</literal>, <literal>%2</literal>, <literal>%N</literal> are simple markers for parameter positions that are implicitly declared when
the reader macro will be interpreted and converted to <literal>fn</literal> expression.</simpara>
<simpara>Also, if a function only accepts one argument, you can ommit the number after <literal>%</literal> symbol, the
function <literal>#(set %1)</literal> can be written <literal>#(set %)</literal>.</simpara>
<simpara>Additionaly, this syntax also supports the variadic form with <literal>%&amp;</literal> symbol:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def my-variadic-set #(set %&amp;))

(my-variadic-set 1 2 2)
;; =&gt; #{1 2}</programlisting>
</section>
</section>
<section id="_flow_control">
<title>Flow control</title>
<simpara><emphasis>ClojureScript</emphasis> has a great different approaches for flow control.</simpara>
<section id="_branching_with_literal_if_literal">
<title>Branching with <literal>if</literal></title>
<simpara>Let start with a basic one: <literal>if</literal>. In <emphasis>ClojureScript</emphasis> the <literal>if</literal> is an expression and not an
statement, and it has three parametes: first one the condition expression, the second one
a expression that will evalute if a condition expression will evalute in a logical true,
and the third one will evaluated otherwise.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn mypos?
  [x]
  (if (pos? x)
    "positive"
    "negative"))

(mypos? 1)
;; =&gt; "positive"

(mypos? -1)
;; =&gt; "negative"</programlisting>
<simpara>If you want do more that one thing in one of two expressions, you can use block expression <literal>do</literal>, that
is will explained in next section.</simpara>
</section>
<section id="_branching_with_literal_cond_literal">
<title>Branching with <literal>cond</literal></title>
<simpara>Sometimes, the <literal>if</literal> expression can be slightly limited because it does not have the "else if" part
for add more that one condition. The cond comes to the rescue.</simpara>
<simpara>With <literal>cond</literal> expression, you can define multiple conditions:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn mypos?
  [x]
  (cond
    (&gt; x 0) "positive"
    (&lt; x 0) "negative"
    :else "zero"))

(mypos? 0)
;; =&gt; "zero"

(mypos? -2)
;; =&gt; "negative"</programlisting>
<simpara>Also, cond has an other form, called <literal>condp</literal>, that works very similar to the simple <literal>cond</literal>
but looks more cleaner when a predicate is always the same for all conditions:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn translate-lang-code
  [code]
  (condp = (keyword code)
    :es "Spanish"
    :en "English"
    "Unknown"))

(translate-lang-code "en")
;; =&gt; "English"

(translate-lang-code "fr")
;; =&gt; "Unknown"</programlisting>
</section>
<section id="_branching_with_literal_case_literal">
<title>Branching with <literal>case</literal></title>
<simpara>The <literal>case</literal> branching expression has very similar use case that our previous example with
<literal>condp</literal>. The main difference is that, case always uses the <literal>=</literal> predicate/function and its
branching values are evaluated at compile time. This results in a more prerformant form
that <literal>cond</literal> or <literal>condp</literal> but has the disadvantage of that the condition value should be
a static value.</simpara>
<simpara>Let see the same example as previous one but using <literal>case</literal>:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn translate-lang-code
  [code]
  (case code
    "es" "Spanish"
    "es" "English"
    "Unknown"))

(translate-lang-code "en")
;; =&gt; "English"

(translate-lang-code "fr")
;; =&gt; "Unknown"</programlisting>
</section>
</section>
<section id="_locals_blocks_and_loops">
<title>Locals, Blocks and Loops</title>
<section id="_locals">
<title>Locals</title>
<simpara><emphasis>ClojureScript</emphasis> does not has the variables concepts, but it does have locals. Locals as per
usual, are immutable and if you try mutate them, the compiller will throw an error.</simpara>
<simpara>The locals are defined with <literal>let</literal> expression. It starts with a vector as first parameter
followed by arbitrary number of expresions. The first parameter should contain a arbitrary
number of pairs that starts with a binding form followed of an expression whose value will
be bound to this new local for the remainer of the let expression.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(let [x (inc 1)
      y (+ x 1)]
  (println "Simple message from body of let")
  (* x y))
;; =&gt; 6</programlisting>
</section>
<section id="_blocks">
<title>Blocks</title>
<simpara>The blocks in <emphasis>ClojureScript</emphasis> can be done using the <literal>do</literal> expression and is ususally used
for side effects, like printing something in console or write a log in a logger. Something
for that the return value is not necesary.</simpara>
<simpara>The <literal>do</literal> expression accept as parameter an arbitrary number of other expressions but return
the return value only from the last one:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(do
   (println "hello world")
   (println "hola mundo")
   (+ 1 2))
;; =&gt; 3</programlisting>
<simpara>The <literal>let</literal> expression, explained just in previous section, the body is very similar to the
<literal>do</literal> expression. In fact, it is called that is has an implicit <literal>do</literal>.</simpara>
</section>
<section id="_loops">
<title>Loops</title>
<simpara>The functional approach of <emphasis>ClojureScript</emphasis>, this causes that it does not have standard,
well known statements based loops. The loops in clojurescript are handled using recursion.
The recursion sometimes requires additional thinking about how model your problem in
a slightly different way than imperative languages.</simpara>
<simpara>Also, many of the common patterns for which <literal>for</literal> is used in other languages are achieved
through higher-order functions.</simpara>
<section id="_looping_with_loop_recur">
<title>Looping with loop/recur</title>
<simpara>Let&#8217;s take a look at how to express loops using recursions with the <literal>loop</literal> and <literal>recur</literal> forms.
<literal>loop</literal> defines a possibly empty list of bindings (notice the symmetry with <literal>let</literal>) and <literal>recur</literal>
jumps execution after the looping point with new values for those bindings.</simpara>
<simpara>Let&#8217;s see an example:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(loop [x 0]
   (println "Looping with " x)
   (if (= x 2)
     (println "Done looping!")
     (recur (inc x))))
;; =&gt; "Looping with 0"
;; =&gt; "Looping with 1"
;; =&gt; "Looping with 2"
;; =&gt; "Done looping!"</programlisting>
<simpara>In the above snippet, we bind the name <literal>x</literal> to the value <literal>0</literal> and execute the body. Since the
condition is not met the first time is run we <literal>recur</literal>, incrementing the binding value with
the <literal>inc</literal> function. We do this once more until the condition is met and, since there aren&#8217;t
more <literal>recur</literal> calls, exit the loop.</simpara>
<simpara>Note that <literal>loop</literal> isn&#8217;t the only point we can <literal>recur</literal> too, using <literal>recur</literal> inside a function
executes the body of the function recursively with the new bindings:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn recursive-function [x]
   (println "Looping with" x)
   (if (= x 2)
     (println "Done looping!")
     (recur (inc x))))

(recursive-function 0)
;; =&gt; "Looping with 0"
;; =&gt; "Looping with 1"
;; =&gt; "Looping with 2"
;; =&gt; "Done looping!"</programlisting>
</section>
<section id="_replacing_for_loops_with_higher_order_functions">
<title>Replacing for loops with higher-order functions</title>
<simpara>In imperative programming languages is common to use <literal>for</literal> loops for iterating over data and
transforming it, usually the intent being one of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Transform every value in the iterable yielding another iterable</simpara>
</listitem>
<listitem>
<simpara>Filter the elements of the iterable by a certain criteria</simpara>
</listitem>
<listitem>
<simpara>Convert the iterable to a value where each iteration depends on the result from the previous one</simpara>
</listitem>
<listitem>
<simpara>Run a computation for every value in the iterable</simpara>
</listitem>
</itemizedlist>
<simpara>The above actions are encoded in higher-order functions and syntactic constructs in ClojureScript,
let&#8217;s see an example of the first three.</simpara>
<simpara>For transforming every value in a iterable data structure we use the <literal>map</literal> function, which takes a
function and a sequence and applies the function to every element:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(map inc [0 1 2])
;; =&gt; (1 2 3)</programlisting>
<simpara>For filtering the values of a data structure we use the <literal>filter</literal> function, which takes a predicate
and a sequence and gives a new sequence with only the elements that returned <literal>true</literal> for the given
predicate:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(filter odd? [1 2 3 4])
;; =&gt; (1 3)</programlisting>
<simpara>Converting an iterable to a value accumulating the intermediate result in every step of the iteration
can be achieved with <literal>reduce</literal>, which takes a function for accumulating values, an optional initial value
and a collection:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(reduce + 0 [1 2 3 4])
;; =&gt; 10</programlisting>
</section>
<section id="__literal_for_literal_sequence_comprehensions">
<title><literal>for</literal> sequence comprehensions</title>
<simpara>In ClojureScript the <literal>for</literal> construct isn&#8217;t used for iteration but for generating sequences, an operation
also known as "sequence comprehension". It offers a small domain specific language for declaratively
building lazy sequences.</simpara>
<simpara>It takes a vector of bindings and a expression and generates a sequence of the result of evaluating the
expression, let&#8217;s take a look at an example:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(for [x [1 2 3]]
  [x x])
;; =&gt; ([1 1] [2 2] [3 3])</programlisting>
<simpara>It supports multiple bindings, which will cause the collections to be iterated in a nested fashion, much
like nesting <literal>for</literal> loops in imperative languages:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(for [x [1 2 3]
      y [4 5]]
  [x y])
;; =&gt; ([1 4] [1 5] [2 4] [2 5] [3 4] [3 5])</programlisting>
<simpara>We can also follow the bindings with three modifiers: <literal>:let</literal> for creating local bindings, <literal>:while</literal> for
breaking out of the sequence generation and <literal>:when</literal> for filtering out values.</simpara>
<simpara>Here&#8217;s an example of local bindings using the <literal>:let</literal> modifier, note that the bindings defined with it
will be available in the expression:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(for [x [1 2 3]
      y [4 5]
      :let [z (+ x y)]]
  z)
;; =&gt; (5 6 6 7 7 8)</programlisting>
<simpara>We can use the <literal>:while</literal> modifier for expressing a condition that, when it is no longer met, will stop
the sequence generation. Here&#8217;s an example:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(for [x [1 2 3]
      y [4 5]
      :while (= y 4)]
  [x y])
;; =&gt; ([1 4] [2 4] [3 4])</programlisting>
<simpara>For filtering out generated values we use the <literal>:when</literal> modifier like in the following example:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(for [x [1 2 3]
      y [4 5]
      :when (= (+ x y) 6)]
  [x y])
;; =&gt; ([1 5] [2 4])</programlisting>
<simpara>We can combine the modifiers shown above for expressing complex sequence generations or
more clearly expressing the intent of our comprehension:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(for [x [1 2 3]
      y [4 5]
      :let [z (+ x y)]
      :when (= z 6)]
  [x y])
;; =&gt; ([1 5] [2 4])</programlisting>
<simpara>When we outlined the most common usages of the <literal>for</literal> construct in imperative programming languages
we mentioned that sometimes we want to run a computation for every value in a sequence, not caring
about the result. Presumably we do this for achieving some sort of side-effect with the values of
the sequence.</simpara>
<simpara>ClojureScript provides the <literal>doseq</literal> construct, which is analogous to <literal>for</literal> but executes the expression
discarding the resulting values and returns <literal>nil</literal>.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(doseq [x [1 2 3]
        y [4 5]
       :let [z (+ x y)]]
  (println x "+" y "=" z))
;; =&gt; "1 + 4 = 5"
;; =&gt; "1 + 5 = 6"
;; =&gt; "2 + 4 = 6"
;; =&gt; "2 + 5 = 7"
;; =&gt; "3 + 4 = 7"
;; =&gt; "3 + 5 = 8"
;; =&gt; nil</programlisting>
</section>
</section>
</section>
<section id="_collection_types">
<title>Collection types</title>
<section id="_immutable_and_persistent">
<title>Immutable and persistent</title>
<simpara>We mentioned before that ClojureScript collections are persistent and immutable but didn&#8217;t explain what
we meant.</simpara>
<simpara>An immutable data structure, as its name suggest, is a data structure that can not be changed. In-place
updates are not allowed in immutable data structures.</simpara>
<simpara>A persistent data structure is a data structure that returns a new version of itself when transforming
it, leaving the original unmodified. ClojureScript makes this memory and time efficient using an
implementation technique called structural sharing, where most of the data shared between two versions
of a value is shared and transformations of a value are implemented by copying the minimal amount of data
required.</simpara>
<simpara>Let&#8217;s see an example of appending values to a vector using the <literal>conj</literal> (for "conjoin") operation:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(let [xs [1 2 3]
      ys (conj xs 4)]
  (println "xs:" xs)
  (println "ys:" ys))
;; =&gt; xs: [1 2 3]
;; =&gt; ys: [1 2 3 4]
;; =&gt; nil</programlisting>
<simpara>As you can see, we derived a new version of the <literal>xs</literal> vector appending an element to it and got a new
vector <literal>ys</literal> with the element added.</simpara>
<simpara>For illustrating the structural sharing of ClojureScript data structures, let&#8217;s compare whether some parts
of the old and new versions of a data structure are actually the same object with the <literal>identical?</literal> predicate.
We&#8217;ll use the list data type for this purpose:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(let [xs (list 1 2 3)
      ys (cons 0 xs)]
  (println "xs:" xs)
  (println "ys:" ys)
  (println "(rest ys):" (rest ys))
  (identical? xs (rest ys)))
;; =&gt; xs: (1 2 3)
;; =&gt; ys: (0 1 2 3)
;; =&gt; (rest ys): (1 2 3)
;; =&gt; true</programlisting>
<simpara>As you can see in the example, we used <literal>cons</literal> (construct) to prepend a value to the <literal>xs</literal> list and we got
a new list <literal>ys</literal> with the element added. The <literal>rest</literal> of the <literal>ys</literal> list (all the values but the first)
are the same object in memory that the <literal>xs</literal> list, thus <literal>xs</literal> and <literal>ys</literal> share structure.</simpara>
</section>
<section id="_the_sequence_abstraction">
<title>The sequence abstraction</title>

</section>
<section id="_collections_in_depth">
<title>Collections in depth</title>
<section id="_lists_2">
<title>Lists</title>

</section>
<section id="_vectors_2">
<title>Vectors</title>

</section>
<section id="_maps_2">
<title>Maps</title>

</section>
<section id="_sets_2">
<title>Sets</title>

</section>
</section>
</section>
<section id="_destructuring">
<title>Destructuring</title>
<simpara>TBD</simpara>
</section>
<section id="_namespaces">
<title>Namespaces</title>
<section id="_defining_a_namespace">
<title>Defining a namespace</title>
<simpara>Namespaces is a clojurescript&#8217;s fundamental unit of code modularity. Are analogous to Java packages or
Ruby and Python modules, and can be defined with <literal>ns</literal> macro. Maybe if you are touched a little bit of
clojurescript source you have seen something like this at begining of the file:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myapp.core
  "Some docstring for the namespace.")

(def x "hello")</programlisting>
<simpara>Namespaces are dynamic and you can create one in any time, but the convention is having one namespace
per file. So, the namespace definition usually is at begining of the file followed with optional
docstring.</simpara>
<simpara>Previously we have explained the vars and symbols. Every var that you are defines will be associated
with one namespace. If you do not define a concrete namespace, the default one called "user" will be
used:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def x "hello")
;; =&gt; #'user/x</programlisting>
</section>
<section id="_loading_other_namespaces">
<title>Loading other namespaces</title>
<simpara>It&#8217;s ok, definining a namespace and vars in it is really easy, but it is not very usefull if we can&#8217;t
use them from other namespaces. For this purpose, the <literal>ns</literal> macro also offers a simple way to load other
namespaces.</simpara>
<simpara>Observe the following:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myapp.main
  (:require myapp.core
            clojure.string))

(clojure.string/upper-case myapp.core/x)
;; =&gt; "HELLO"</programlisting>
<simpara>As you can observe, we are using fully qualified names (namespace + var name) for access to vars and
functions from different namespaces.</simpara>
<simpara>It is ok, we not can access to other namespaces but is very boring always write the complete namespace
name for access to its vars and functions. It will be specially uncomfortable if a namespace name
is very large. For solve that, you can use the <literal>:as</literal> directive for create an additional (usually
more shorter) alias to the namespace. Let see the how it can be done:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myapp.main
  (:require [myapp.core :as core]
            [clojure.string :as str]))

(str/upper-case core/x)
;; =&gt; "HELLO"</programlisting>
<simpara>Additionaly, <emphasis>ClojureScript</emphasis> offers a simple way to refer specific vars or functions from concrete namespace using the <literal>:refer</literal> directive.</simpara>
<simpara>The <literal>:refer</literal> directive has two possible arguments: <literal>:all</literal> keyword or a vector of symbols that will
refer to vars in the namespace. With <literal>:all</literal> we are indicating that we want refer all public vars from the
namespace and with vector we can specify the concrete subset of vars that we want.</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myapp.main
  (:require [myapp.core :refer :all]
            [clojure.string :refer [upper-case]]))</programlisting>
<simpara>And finally, we should know that everything that located in the <literal>cljs.core</literal> namespace is automatically
loaded and you should not require it explicitly. But sometimes you want declare vars that will clash
with some other defined in <literal>cljs.core</literal> namespace. For it, the <literal>ns</literal> macro offers an other directive that
allows exclude concrete symbols and prevet them to be automaticaly loaded.</simpara>
<simpara>Observe the following:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myapp.main
  (:refer-clojure :exclude [min]))

(defn min
  [x y]
  (if (&gt; x y)
    y
    x))</programlisting>
<simpara>The <literal>ns</literal> macro also has other directives for loading host clases (<literal>:import</literal>) and macros
(<literal>:refer-macros</literal>), but them are explained in posterior sections.</simpara>
</section>
</section>
<section id="_abstractions_and_polymorphism">
<title>Abstractions and Polymorphism</title>
<simpara>I&#8217;m sure that in more that in one time you have found in this situation: you have defined a great
abstraction (using interfaces or something similar) for your "bussines logic" and you have found
the need to deal with an other module over which you have absolutelly no control, and you probably
was thinking in create adapters, proxies and other approaches that will implies a great amount
of additional complexity.</simpara>
<simpara>Some dynamic languages allows "monkey-patching", languages where the classes are open and any
method can be defined and redefined at any time. Also, is very known that this technique is a very
bad practice.</simpara>
<simpara>We can not trust languages that allows that when importing third party libraries, can silently overwrite
methods that you are using and expecting a concrete behavior.</simpara>
<simpara>This symptoms denotes a commonly named: "Expression problem".</simpara>
<simpara>TODO: add link to expression problem description</simpara>
<section id="_protocols">
<title>Protocols</title>
<simpara>The <emphasis>ClojureScript</emphasis> primitive for define "interfaces" are called Protocols. A protocol consists in
a name and set of functions. All functions have at least one argument corresponding to the
<literal>this</literal> in javascript or <literal>self</literal> in Python.</simpara>
<simpara>Protocols provides a type based polymorphism, and the dispatch is always done by the first argument
previously mentioned as <literal>this</literal>.</simpara>
<simpara>A protocol looks like this:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myapp.foobar)

(defprotocol IUser
  "A common abstraction for an User type."
  (full-name [x] "Get a full name of the user."))</programlisting>
<note>
<simpara>the "I" prefix is very common for make clear separation of protocols and types. In clojute
comunity it there many dispare optionions about the use of the "I" prefix. In our opinion is an
acceptable solution for avoid name clashing and confusions.</simpara>
</note>
<simpara>From the user perspective, protocol functions are simple and plain functions defined in the namespace
where the protocol is defined. As you can intuit, this makes protocols completelly namespaces and
avoid any accidental clashing between implemented protocols for same type.</simpara>
<note>
<simpara>Inside the clojure community the convention for protocol functions is treat them as private api
and not expose them to the general public api.</simpara>
</note>
<section id="_extending_to_existing_types">
<title>Extending to existing types</title>
<simpara>TBD</simpara>
</section>
<section id="_protocols_introspection">
<title>Protocols introspection</title>
<simpara>TBD</simpara>
</section>
<section id="_edge_cases">
<title>Edge cases</title>
<simpara>TBD</simpara>
</section>
<section id="_participate_in_clojurescript_abstractions">
<title>Participate in ClojureScript abstractions</title>
<simpara>TBD</simpara>
</section>
</section>
<section id="_multimethods">
<title>Multimethods</title>
<simpara>TBD</simpara>
</section>
</section>
<section id="_data_types">
<title>Data types</title>
<simpara>Until, now, we have used maps, sets, lists and vectors for represent our data. And in most cases is a
really great aproach for do it. But some times we need define our own types and in this book we will
call them <emphasis role="strong">datatypes</emphasis>.</simpara>
<simpara>A datatype provides the following:</simpara>
<itemizedlist>
<listitem>
<simpara>A unique host backed type, either named or anonymous.</simpara>
</listitem>
<listitem>
<simpara>Explicitly declared structure using fields or closures.</simpara>
</listitem>
<listitem>
<simpara>Implement concrete abstractions.</simpara>
</listitem>
<listitem>
<simpara>Map like behavior (via records, see below).</simpara>
</listitem>
</itemizedlist>
<section id="_deftype">
<title>Deftype</title>
<simpara>The most low level construction in <emphasis>ClojureScript</emphasis> for create own types, is the <literal>deftype</literal> macro. For
demostration we will define a type called <literal>User</literal>:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(deftype User [firstname lastname])</programlisting>
<simpara>Once the type has beed defined, we can create an instance of our <literal>User</literal>:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def user (User. "Triss" "Merigold"))</programlisting>
<simpara>And its fields can be accesset using the prefix-dot notation:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(.-firstname user)
;; =&gt; "Triss"</programlisting>
<simpara>Types defined with deftype (and posteriory with defrecord) creates a host backed class like object
associated to the current namespace. But it has some peculiarities when we intend to use or import
it from other namespace. The types in <emphasis>ClojureScript</emphasis> should be imported with <literal>:import</literal> directive
of <literal>ns</literal> macro:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(ns myns.core
  (:import otherns.User))

(User. "Cirilla" "Fiona")</programlisting>
<simpara>For convenience, <emphasis>ClojureScript</emphasis> also defines a constructor function caled <literal>&#8594;User</literal> that can be imported
with the common way using <literal>:require</literal> directive.</simpara>
<simpara>We personally do not like this type of functions, and we prefer define own constructors, with more
idiomatic names:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn user
  [firstname lastname]
  (User. firstname lastname))</programlisting>
<simpara>And use it in our code instead of <literal>&#8594;User</literal>.</simpara>
</section>
<section id="_defrecord">
<title>Defrecord</title>
<simpara>The record is a slightly higher level abstraction for define types in <emphasis>ClojureScript</emphasis> and should be
prefered way to do it.</simpara>
<simpara>As we know, <emphasis>ClojureScript</emphasis> tends to use plain data types how are the maps but in most cases we need
have a named type for represent the entities of our application. Here come the records.</simpara>
<simpara>A record is a datatype that implements a map protocols and therefore can be used like any other map.
And since records are also proper types, they support type-based polymorphism through protocols.</simpara>
<simpara>In summary: with records, we have the best of both worlds, maps that can play in in different
abstractions.</simpara>
<simpara>Let start defining the <literal>User</literal> type but using records:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defrecord User [firstname lastname])</programlisting>
<simpara>It looks really similar to deftype syntax, in fact, it uses deftype behind the scenes as low level
primitive for defining types.</simpara>
<simpara>Now, look the difference with raw types for access to its fields:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def user (User. "Yennefer" "of Vengerberg"))

(:username user)
;; =&gt; "Yennefer"

(get user :username)
;; =&gt; "Yennefer"</programlisting>
<simpara>As we mention previously, records are maps and acts like tham:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(map? user)
;; =&gt; true</programlisting>
<simpara>And like maps, tham support extra fields that are not initially defined:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def user2 (assoc user :age 92))

(:age user2)
;; =&gt; 92</programlisting>
<simpara>As we can see, the <literal>assoc</literal> function works as is expected and return a new instance of the same
type but with new key value pair. But take care with <literal>dissoc</literal>, its behavior with records is slightly
different that with maps; it will return a new record if the field being dissociated is an optional
field, but it will return a plain map if you dissociate the mandatory field.</simpara>
<simpara>An other difference with maps is that records does not acts like functions:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def plain-user {:username "Yennefer", :lastname "of Vengerberg"})

(plain-user :username)
;; =&gt; "Yennefer"

(user :username)
;; =&gt; user.User does not implements IFn protocol.</programlisting>
<simpara>The <literal>defrecord</literal> macro like the <literal>deftype</literal>, for convenience esposes <literal>&#8594;User</literal> function, but with additional
one <literal>map&#8594;User</literal> constructor function. We have the same opionon about that constructors that with
deftype defined ones: we recommend define own instead of use that ones. But as they exists, let see
how they can be used:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(def cirilla (-&gt;User "Cirilla" "Fiona"))
(def yen (map-&gt;User {:firstname "Yennefer"
                     :lastname "of Vengerberg"}))</programlisting>
</section>
<section id="_implement_protocols">
<title>Implement protocols</title>
<simpara>Both type definition primitives that we have seen until now allows inline implementations for protocols
(explained in previous section). Let start define one for example purposes:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defprotocol IUser
  "A common abstraction for work with user types."
  (full-name [_] "Get the full name of the user."))</programlisting>
<simpara>Now, you can define a type with inline implementation for an abstraction, in our case the <literal>IUser</literal>:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defrecord User [firstname lastname]
  IUser
  (full-name [_]
    (str firstname " " lastname)))

;; Create an instance.
(def user (User. "Yennefer" "of Vengerberg"))

(full-name user)
;; =&gt; "Yennefer of Vengerberg"</programlisting>
</section>
<section id="_reify">
<title>Reify</title>
<simpara>The <literal>reify</literal> macro lets you create an anonymous types that implement protocols. In difference with
deftype and defrecord, it does not has accessible fields.</simpara>
<simpara>This is a way how we can emulate an instance of user type and that plays well in <literal>IUser</literal> abstraction:</simpara>
<programlisting language="clojure" linenumbering="unnumbered">(defn user
  [firstname lastname]
  (reify
    IUser
    (full-name [_]
      (str firstname " " lastname))))

(def yen (user "Yennefer" "of Vengerberg"))
(full-name user)
;; =&gt; "Yennefer of Vengerberg"</programlisting>
<simpara>The real purpose of reify is create anonymous types that plains in a concrete abstractions but
you do not want a type in self.</simpara>
</section>
</section>
<section id="_host_interoperability">
<title>Host interoperability</title>
<simpara>TBD</simpara>
</section>
<section id="_state_management">
<title>State management</title>
<simpara>TBD</simpara>
</section>
<section id="_mutability">
<title>Mutability</title>
<simpara>TBD</simpara>
</section>
<section id="_a_little_overview_of_macros">
<title>A little overview of macros</title>
<simpara>TBD</simpara>
</section>
<section id="_truthiness">
<title>Truthiness</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="_tooling_compiler">
<title>Tooling &amp; Compiler</title>
<simpara>This chapter will cover a little introduction to existing tooling for making things easy when
developing using ClojureScript. It will cover:</simpara>
<itemizedlist>
<listitem>
<simpara>Using the repl</simpara>
</listitem>
<listitem>
<simpara>Leiningen and cljsbuild</simpara>
</listitem>
<listitem>
<simpara>Google Closure Library</simpara>
</listitem>
<listitem>
<simpara>Modules</simpara>
</listitem>
<listitem>
<simpara>Unit testing</simpara>
</listitem>
<listitem>
<simpara>Library development</simpara>
</listitem>
<listitem>
<simpara>Browser based development</simpara>
</listitem>
<listitem>
<simpara>Server based development</simpara>
</listitem>
</itemizedlist>
<simpara>Unlike the previos chapter, this chapter intends to tell different histories not all related
to each other.</simpara>
<section id="_working_with_the_repl">
<title>Working with the REPL</title>
<simpara>TBD</simpara>
</section>
<section id="_getting_started_with_compiler">
<title>Getting started with Compiler</title>
<simpara>TBD</simpara>
</section>
<section id="_build_dependency_management_tools">
<title>Build &amp; Dependency management tools</title>
<section id="_getting_started_with_leiningen">
<title>Getting started with leiningen.</title>
<simpara>TBD</simpara>
</section>
<section id="_getting_started_with_boot">
<title>Getting started with boot.</title>
<simpara>TBD</simpara>
</section>
</section>
<section id="_the_closure_library">
<title>The Closure Library</title>
<simpara>TBD</simpara>
</section>
<section id="_browser_based_development">
<title>Browser based development</title>
<simpara>TBD</simpara>
<section id="_using_third_party_javascript_libraryes">
<title>Using third party javascript libraryes</title>
<simpara>TBD</simpara>
</section>
<section id="_modularizing_your_code">
<title>Modularizing your code</title>
<simpara>TBD</simpara>
</section>
</section>
<section id="_developing_a_library">
<title>Developing a library</title>
<simpara>TBD</simpara>
</section>
<section id="_unit_testing">
<title>Unit testing</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="_mixed_bag">
<title>Mixed Bag</title>
<simpara>This chapter will cover miscelaneous topics that are not classified in the previous ones. This is a
"catchall" section and will touch a bunch of heterogeneus topics like:</simpara>
<itemizedlist>
<listitem>
<simpara>Async primitives using <emphasis>core.async</emphasis> library.</simpara>
</listitem>
<listitem>
<simpara>Working with promises.</simpara>
</listitem>
<listitem>
<simpara>Error handling using <emphasis>cats</emphasis> library.</simpara>
</listitem>
<listitem>
<simpara>Pattern matching with <emphasis>core.match</emphasis> library.</simpara>
</listitem>
<listitem>
<simpara>Web development using Om library.</simpara>
</listitem>
<listitem>
<simpara>Share code betwen clojure and clojurescript.</simpara>
</listitem>
</itemizedlist>
<section id="_async_primitives_using_core_async">
<title>Async primitives using core.async.</title>
<simpara>TBD</simpara>
</section>
<section id="_working_with_promises">
<title>Working with promises.</title>
<simpara>TBD</simpara>
</section>
<section id="_error_handling_using_monads_and_cats">
<title>Error handling using monads and Cats.</title>
<simpara>TBD</simpara>
</section>
<section id="_pattern_matching_using_core_match">
<title>Pattern matching using core.match.</title>
<simpara>TBD</simpara>
</section>
<section id="_web_development_with_om_and_react">
<title>Web development with Om and React.</title>
<simpara>TBD</simpara>
</section>
<section id="_writing_libraries_that_shares_code_betwen_clojure_and_clojurescript">
<title>Writing libraries that shares code betwen Clojure and ClojureScript.</title>
<simpara>TBD</simpara>
</section>
</chapter>
</book>